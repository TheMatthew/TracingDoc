{"name":"Tracingdoc","tagline":"Tracing documentaiton","body":"TracingDoc\r\n==========\r\n\r\nA one stop shop to get into tracing\r\n\r\nWhat is tracing?\r\n================\r\n\r\nTracing is the action of writing the flow of a program during normal and abnormal behavior. It is used to troubleshoot problems without affecting teh flow of the program.\r\n\r\nTracing differs from logging in that the data is generally not human readible but is able to be written quickly. Also, every event should have a timestamp allowing overlap with profiling. \r\n\r\n\r\nWhy Trace?\r\n==========\r\n\r\nTracing is useful to debug problems in production machines. It also allows peolpe to figure out why their program may be running slower than expected. It will give the full view of a system.\r\n\r\nBecause of this , the three main reasons to trace are: \r\n\r\n* understanding: to get a better idea of what's going on under the hood\r\n* performance profiling: to figure out why your system is consuming the resources it is. (CPU/RAM/IO/NET...)\r\n* non-disruptive testing: (minimally disruptive) testing protocols or real-time systems where a late answer is a bad answer\r\n\r\nHow to Trace?\r\n=============\r\n\r\nUsing Printf?\r\n\r\n\r\nUsing LTTng?\r\n\r\n\r\nHow To View Traces?\r\n===================\r\n\r\nPicking the tool\r\n\r\nUsing Babeltrace? \r\n\r\nUsing Battrace\r\n\r\nUsing Eclipse/LTTng\r\n\r\nUsing LTTv\r\n\r\nDigging deeper\r\n==============\r\n\r\nNow that you've opeened and viewed a trace, here's some more analysis that can be done. \r\n\r\nBabeltrace\r\n\r\nBattrace\r\n\r\nEclipse/LTTng\r\n\r\nLTTv\r\n\r\nReferences\r\n==========\r\n\r\nhttp://multivax.blogspot.ca/\r\n\r\nhttp://dtrace.org/blogs/brendan/2013/08/16/memory-leak-growth-flame-graphs/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}